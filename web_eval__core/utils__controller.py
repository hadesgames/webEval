import datetime

from django.http import HttpResponseRedirect, Http404, HttpResponse
from django.shortcuts import get_object_or_404, render_to_response 
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
from django.core.urlresolvers import reverse
from django.views.decorators.csrf import csrf_protect
from annoying.functions import get_object_or_None

from webEval.judge_settings import *
from webEval.web_eval__core.auth__helper import user_auth
from webEval.web_eval__core.models import *


def redirect_to_index(message):
    return HttpResponseRedirect(reverse('webEval.web_eval__core.wiki__controller.dashboard') + "?error_message=%s" % message)

def redirect_with_message(page, message):
    return HttpResponseRedirect(page + "?error_message=%s" % message)

def tickets (request):
    tickets = Ticket.objects.exclude(status = 'completed').order_by('-id')
    closed_tickets = Ticket.objects.filter(status = 'completed').order_by('-id')
    
    return render_to_response('utils/display_tickets.html',
                              {
                                    'tickets' : tickets,
                                    'closed_tickets' : closed_tickets,
                                    'navigation' : {
                                        'main' : 'judge',
                                        'other' : 'tickets',
                                    }
                              },
                              context_instance = RequestContext(request)
                             )
    
@login_required
def new_ticket (request):
    user = user_auth(request)
    
    if request.method == 'POST':
        form = TicketForm(request.POST)
        
        if form.is_valid():
            ticket = form.save(commit = False)
            ticket.severity = 'normal'
            ticket.status = 'open'
            ticket.author = user
            ticket.date_posted = datetime.datetime.now()
            ticket.save()
            return HttpResponseRedirect(reverse('webEval.web_eval__core.utils__controller.tickets'))
    else:
        form = TicketForm()
        
    return render_to_response('utils/new_ticket.html',
                              {
                                    'form' : form,
                                    'ticket_types' : TICKET_TYPES,
                                    'navigation' : {
                                        'main' : 'judge',
                                        'other' : 'new-ticket',
                                    }
                              },
                              context_instance = RequestContext(request)
                             )
    

@csrf_protect
def display_ticket (request, ticket_id):
    ticket = get_object_or_404(Ticket, id = ticket_id)
    user = user_auth(request)
    
    if request.method == 'POST' and user is not None:
        form = TicketCommentForm(request.POST)
        if form.is_valid():
            if 'comment_id' in request.POST:
                if request.POST['comment_id'] != "":
                    comment = get_object_or_None(TicketComment, id=request.POST['comment_id'])
                    if comment is None or comment.autogenerated or (user.is_staff is False and user != comment.author) or comment.can_be_edited() is False:
                        return redirect_to_index("You can't edit this comment.")
                    form = TicketCommentForm(request.POST, instance = comment)
                    if form.is_valid():
                        form.save()
                else:
                    comment = form.save(commit = False)
                    comment.ticket, comment.author, comment.date_posted = ticket, user, datetime.datetime.now()
                    comment.save()
            else:
                form = TicketCommentForm()
    else:
        form = TicketCommentForm()
    
    return render_to_response('utils/display_ticket.html',
                              {
                                    'ticket' : ticket,
                                    'form' : form,
                                    'navigation' : {
                                        'main' : 'judge',
                                        'other' : 'display-ticket',
                                    }
                              },
                              context_instance = RequestContext(request)
                             )
    
    
@login_required
def edit_ticket (request, ticket_id):
    ticket = get_object_or_404(Ticket, id = ticket_id)
    user = user_auth(request)
    
    if user.is_superuser is False and user != ticket.author:
        return redirect_with_message(reverse("webEval.web_eval__core.utils__controller.tickets"),
                                     "You don't have enough permissions to edit this ticket.") 
    
    if request.method == 'POST':
        initial = {
            'type' : ticket.type,
            'severity' : ticket.severity,
            'status' : ticket.status,
            'milestone' : ticket.milestone.id if ticket.milestone is not None else None,
            'assignee' : ticket.assignee.id if ticket.assignee is not None else None,
        }
        if user.is_superuser:
            form = TicketAdminForm(request.POST, instance=ticket)
        else:
            form = TicketForm(request.POST, instance=ticket)
            
        if form.is_valid():
            
            changed = []
            if initial['type'] != request.POST['type']:
                changed.append(['Type', initial['type'], request.POST['type']])
            if initial['severity'] != request.POST['severity']:
                changed.append(['Severity', initial['severity'], request.POST['severity']])
            if initial['status'] != request.POST['status']:
                changed.append(['Status', initial['status'], request.POST['status']])
            if str(initial['milestone']) != request.POST['milestone']:
                m1 = TicketMilestone.objects.get(id=initial['milestone']).name if initial['milestone'] is not None else None 
                m2 = TicketMilestone.objects.get(id=request.POST['milestone']).name if request.POST['milestone'] is not None else None
                changed.append(['Milestone', m1, m2])
            if str(initial['assignee']) != request.POST['assignee']:
                a1 = get_object_or_None(UserProfile, id = initial['assignee'] if initial['assignee'] != "" else None)
                a2 = get_object_or_None(UserProfile, id = request.POST['assignee'] if request.POST['assignee'] != "" else None)
                if a1 != a2:
                    m1 = "%s %s" % (a1.first_name, a1.last_name) if a1 is not None else None
                    m2 = "%s %s" % (a2.first_name, a2.last_name) if a2 is not None else None
                    changed.append(['Assignee', m1, m2])
                
            #print ticket.status, request.POST['status']
            if changed:
                comment = TicketComment(author = user, ticket = ticket, date_posted = datetime.datetime.now(), autogenerated = True)
                for changed_item in changed:
                    comment.content += "* **%s** changed from //%s// to //%s//\n" % (changed_item[0], changed_item[1], changed_item[2])
                comment.save()
            print changed
            form.save()
            return HttpResponseRedirect(reverse('webEval.web_eval__core.utils__controller.display_ticket',
                                                kwargs={'ticket_id' : ticket.id }
                                               )
                                       )
    else:
        if user.is_superuser:
            form = TicketAdminForm(ticket)
        else:
            form = TicketForm(ticket)
            
    return render_to_response('utils/edit_ticket.html',
                              {
                                    'form' : form,
                                    'ticket' : ticket,
                                    'admin_edit' : user.is_superuser,
                                    'ticket_types' : TICKET_TYPES,
                                    'ticket_severities' : TICKET_SEVERITIES,
                                    'ticket_states' : TICKET_STATES,
                                    'ticket_milestones' : TicketMilestone.objects.all().order_by('version'),
                                    'developers' : UserProfile.objects.filter(developer = True),
                                    'navigation' : {
                                        'main' : 'judge',
                                        'other' : 'edit-ticket',
                                    }
                              },
                              context_instance = RequestContext(request)
                             )
    
    
@login_required
def delete_comment (request, ticket_id, comment_id=None):
    """Delete comment(s) with primary key `pk` or with pks in POST."""
    if request.user.is_staff:
        ticket = get_object_or_404(Ticket, id = ticket_id)
        if comment_id is None: 
            pklst = request.POST.getlist("delete")
        else:
            pklst = [comment_id]

        for pk in pklst:
            TicketComment.objects.get(pk=pk).delete()
        return HttpResponseRedirect(reverse("webEval.web_eval__core.utils__controller.display_ticket",
                                            kwargs={
                                                    'ticket_id' : ticket.id,
                                            }
                                           ) + "#comments"
                                   )
    
    